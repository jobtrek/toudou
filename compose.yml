services:
  pgsql:
    image: postgres:17.2
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DB_SCHEMA=${DB_SCHEMA}
    volumes:
      - pgsql-data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - toudou-internal
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-q'
        - '-d'
        - '${DB_DATABASE}'
        - '-U'
        - '${DB_USERNAME}'
      retries: 3
      timeout: 5s

  on-startup-migration:
    image: sqitch/sqitch
    environment:
      - SQITCH_TARGET="db:pg://postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgsql:5432/${POSTGRES_DB}"
    volumes:
      - "./migrations:/repo"
    command:
      - "deploy"
    depends_on:
      pgsql:
        condition: service_healthy

  postgrest:
    image: postgrest/postgrest:v12.2.3
    ports:
      - "3000:3000"
    networks:
      - toudou-internal
    restart: unless-stopped
    environment:
      - PGRST_JWT_SECRET="${JWT_SECRET}"
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgsql:5432/${POSTGRES_DB}
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      - PGRST_DB_SCHEMAS=${DB_SCHEMA}
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:3000
      - PGRST_OPENAPI_MODE="ignore-privileges"
    depends_on:
      pgsql:
        condition: service_healthy
      migration:
        condition: service_completed_successfully

  swagger-ui:
    image: swaggerapi/swagger-ui:3.18.2
    ports:
      - "8080:8080"
    environment:
      - API_URL=http://localhost:3000/
    restart: unless-stopped

volumes:
  pgsql-data:

networks:
  toudou-internal:
